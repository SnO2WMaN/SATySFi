@require: gr

module Proof
% :> sig
%
%  direct \derive : [math?; bool?; math list; math] math-cmd
%  direct \derive-multi : [math?; bool?; length; math list; math] math-cmd
%
% end
= struct

  val math \math-space len =
    text-in-math MathOrd (fun _ -> inline-skip len)


  val length-max len1 len2 =
    if len1 <' len2 then len2 else len1


  val derive nameopt bopt widopt mlst1 m2 =
    let ib-space =
      match widopt with
      | None    -> inline-skip 30pt
      | Some(_) -> discretionary 100 (inline-skip 30pt) inline-fil inline-fil
      end
    in
    text-in-math MathInner (fun ctx -> (
      let ibacc1 =
        (mlst1 |> List.fold-left-adjacent (fun ibacc1 m prevopt _ -> (
          let ibm = embed-math ctx m in
          match prevopt with
          | None    -> inline-fil ++ ibm
          | Some(_) -> ibacc1 ++ ib-space ++ ibm
          end
        )) inline-nil) ++ inline-fil
      in
      let ib1 =
        match widopt with
        | None      -> ibacc1
        | Some(wid) -> embed-block-bottom ctx wid (fun ctx -> line-break true true ctx ibacc1)
        end
      in
      let ib2 = inline-fil ++ (embed-math ctx m2) ++ inline-fil in
      let w =
        match widopt with
        | None      -> length-max (Pervasives.get-natural-width ib1) (Pervasives.get-natural-width ib2)
        | Some(wid) -> length-max wid (Pervasives.get-natural-width ib2)
        end
      in
      let color = get-text-color ctx in
      let thickness = 0.5pt in
      let gap = 2pt in
      let (glnamef, wname) =
        match nameopt with
        | None ->
            ((fun _ -> []), 0pt)

        | Some(name) ->
            let ib = embed-math ctx name in
            let (wname, _, _) = get-natural-metrics ib in
            let wname =
              match bopt with
              | None        -> wname
              | Some(false) -> wname
              | Some(true)  -> 0pt
              end
            in
            ((fun pt -> [Gr.text-rightward pt ib]), wname)
        end
      in
      let bar =
          inline-graphics w (thickness +' gap) gap (fun (x, y) ->
            List.append
              [ fill color (Gr.rectangle (x, y) (x +' w, y +' thickness)) ]
              (glnamef (x +' w, y -' (get-axis-height ctx)))
          )
      in
        line-stack-bottom [ib1, bar, ib2]
          ++ inline-skip wname
    ))


  val math \derive ?(name = nameopt, b = bopt) mlst m =
    derive nameopt bopt None mlst m

  val math \derive-multi ?(name = nameopt, b = bopt) w =
    derive nameopt bopt (Some(w))

end
